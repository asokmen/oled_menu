
software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a4  080039a4  000208ec  2**0
                  CONTENTS
  4 .ARM          00000000  080039a4  080039a4  000208ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039a4  080039a4  000208ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008ec  20000000  080039ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200008ec  08004298  000208ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd8  08004298  00020dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000208ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c784  00000000  00000000  00020915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d04  00000000  00000000  0002d099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0002eda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0002faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017910  00000000  00000000  000307a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e950  00000000  00000000  000480b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089fa1  00000000  00000000  00056a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e09a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003850  00000000  00000000  000e09f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200008ec 	.word	0x200008ec
 8000128:	00000000 	.word	0x00000000
 800012c:	080031dc 	.word	0x080031dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200008f0 	.word	0x200008f0
 8000148:	080031dc 	.word	0x080031dc

0800014c <submenus_set>:
        return 0;
    }
}

void submenus_set(int menuindex_lower_limit,int page_count_lower_limit,int total_number_of_menus)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	if(buton_set_flag)
 8000158:	4b12      	ldr	r3, [pc, #72]	; (80001a4 <submenus_set+0x58>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d01c      	beq.n	800019a <submenus_set+0x4e>
	{
		if(menu_index == menuindex_lower_limit)
 8000160:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <submenus_set+0x5c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	68fa      	ldr	r2, [r7, #12]
 8000166:	429a      	cmp	r2, r3
 8000168:	d106      	bne.n	8000178 <submenus_set+0x2c>
		{
			page_count=page_count_lower_limit;
 800016a:	4a10      	ldr	r2, [pc, #64]	; (80001ac <submenus_set+0x60>)
 800016c:	68bb      	ldr	r3, [r7, #8]
 800016e:	6013      	str	r3, [r2, #0]
			buton_set_flag=0;
 8000170:	4b0c      	ldr	r3, [pc, #48]	; (80001a4 <submenus_set+0x58>)
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8000176:	e010      	b.n	800019a <submenus_set+0x4e>
			menuindex_lower_limit++;
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	3301      	adds	r3, #1
 800017c:	60fb      	str	r3, [r7, #12]
			page_count_lower_limit++;
 800017e:	68bb      	ldr	r3, [r7, #8]
 8000180:	3301      	adds	r3, #1
 8000182:	60bb      	str	r3, [r7, #8]
			total_number_of_menus--;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	3b01      	subs	r3, #1
 8000188:	607b      	str	r3, [r7, #4]
			if(total_number_of_menus>0)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2b00      	cmp	r3, #0
 800018e:	dd04      	ble.n	800019a <submenus_set+0x4e>
				submenus_set(menuindex_lower_limit, page_count_lower_limit, total_number_of_menus);
 8000190:	687a      	ldr	r2, [r7, #4]
 8000192:	68b9      	ldr	r1, [r7, #8]
 8000194:	68f8      	ldr	r0, [r7, #12]
 8000196:	f7ff ffd9 	bl	800014c <submenus_set>
}
 800019a:	bf00      	nop
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200009b4 	.word	0x200009b4
 80001a8:	200009bc 	.word	0x200009bc
 80001ac:	200009b8 	.word	0x200009b8

080001b0 <submenus_esc>:

void submenus_esc(int back_to_page)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if(buton_esc_flag)
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <submenus_esc+0x28>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d005      	beq.n	80001cc <submenus_esc+0x1c>
	{
		page_count=back_to_page;
 80001c0:	4a06      	ldr	r2, [pc, #24]	; (80001dc <submenus_esc+0x2c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	6013      	str	r3, [r2, #0]
		buton_esc_flag=0;
 80001c6:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <submenus_esc+0x28>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
	}
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200009b0 	.word	0x200009b0
 80001dc:	200009b8 	.word	0x200009b8

080001e0 <lcd_print>:




void lcd_print(menu p[])
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    for(int i = 0;i<5;i++){
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e01a      	b.n	8000224 <lcd_print+0x44>

    	SSD1306_GotoXY(10,crossIndexLine[i]);
 80001ee:	4a11      	ldr	r2, [pc, #68]	; (8000234 <lcd_print+0x54>)
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4413      	add	r3, r2
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	4619      	mov	r1, r3
 80001fa:	200a      	movs	r0, #10
 80001fc:	f000 fcca 	bl	8000b94 <SSD1306_GotoXY>
        SSD1306_Puts(p[i].index,&Font_7x10,1);
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	4613      	mov	r3, r2
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	4413      	add	r3, r2
 8000208:	00db      	lsls	r3, r3, #3
 800020a:	461a      	mov	r2, r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4413      	add	r3, r2
 8000210:	2201      	movs	r2, #1
 8000212:	4909      	ldr	r1, [pc, #36]	; (8000238 <lcd_print+0x58>)
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fd53 	bl	8000cc0 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 800021a:	f000 fc17 	bl	8000a4c <SSD1306_UpdateScreen>
    for(int i = 0;i<5;i++){
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	2b04      	cmp	r3, #4
 8000228:	dde1      	ble.n	80001ee <lcd_print+0xe>

    }
}
 800022a:	bf00      	nop
 800022c:	bf00      	nop
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200008d8 	.word	0x200008d8
 8000238:	20000000 	.word	0x20000000

0800023c <page_buffer_choice>:


void page_buffer_choice(int choice_menu)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]

	if( buton_set_flag)
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <page_buffer_choice+0x30>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d003      	beq.n	8000254 <page_buffer_choice+0x18>
	{
		menu_choice(choice_menu);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f000 f811 	bl	8000274 <menu_choice>
	}
	else if(buton_esc_flag)
	{
		menu_choice(choice_menu);
	}
}
 8000252:	e006      	b.n	8000262 <page_buffer_choice+0x26>
	else if(buton_esc_flag)
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <page_buffer_choice+0x34>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d002      	beq.n	8000262 <page_buffer_choice+0x26>
		menu_choice(choice_menu);
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f000 f809 	bl	8000274 <menu_choice>
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	200009b4 	.word	0x200009b4
 8000270:	200009b0 	.word	0x200009b0

08000274 <menu_choice>:


void menu_choice(int index_choice)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 800027c:	f000 fd45 	bl	8000d0a <SSD1306_Clear>
	switch(index_choice)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b10      	cmp	r3, #16
 8000284:	f200 80b2 	bhi.w	80003ec <menu_choice+0x178>
 8000288:	a201      	add	r2, pc, #4	; (adr r2, 8000290 <menu_choice+0x1c>)
 800028a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800028e:	bf00      	nop
 8000290:	080002d5 	.word	0x080002d5
 8000294:	080002e7 	.word	0x080002e7
 8000298:	080002ff 	.word	0x080002ff
 800029c:	08000317 	.word	0x08000317
 80002a0:	0800032f 	.word	0x0800032f
 80002a4:	08000347 	.word	0x08000347
 80002a8:	08000355 	.word	0x08000355
 80002ac:	08000363 	.word	0x08000363
 80002b0:	08000371 	.word	0x08000371
 80002b4:	0800037f 	.word	0x0800037f
 80002b8:	0800038b 	.word	0x0800038b
 80002bc:	08000399 	.word	0x08000399
 80002c0:	080003a7 	.word	0x080003a7
 80002c4:	080003b5 	.word	0x080003b5
 80002c8:	080003c3 	.word	0x080003c3
 80002cc:	080003d1 	.word	0x080003d1
 80002d0:	080003df 	.word	0x080003df
	{
		case mainmenu:
			lcd_print(main_menu);
 80002d4:	4847      	ldr	r0, [pc, #284]	; (80003f4 <menu_choice+0x180>)
 80002d6:	f7ff ff83 	bl	80001e0 <lcd_print>
			submenus_set(0, 1, 5);
 80002da:	2205      	movs	r2, #5
 80002dc:	2101      	movs	r1, #1
 80002de:	2000      	movs	r0, #0
 80002e0:	f7ff ff34 	bl	800014c <submenus_set>

			break;
 80002e4:	e082      	b.n	80003ec <menu_choice+0x178>
		case DEVICE_SETTINGS:
			lcd_print(device_menu);
 80002e6:	4844      	ldr	r0, [pc, #272]	; (80003f8 <menu_choice+0x184>)
 80002e8:	f7ff ff7a 	bl	80001e0 <lcd_print>
			submenus_set(0, 6, 4);
 80002ec:	2204      	movs	r2, #4
 80002ee:	2106      	movs	r1, #6
 80002f0:	2000      	movs	r0, #0
 80002f2:	f7ff ff2b 	bl	800014c <submenus_set>
			submenus_esc(0);
 80002f6:	2000      	movs	r0, #0
 80002f8:	f7ff ff5a 	bl	80001b0 <submenus_esc>

			break;
 80002fc:	e076      	b.n	80003ec <menu_choice+0x178>
		case TEMP_SETTINGS:
			lcd_print(Temp_menu);
 80002fe:	483f      	ldr	r0, [pc, #252]	; (80003fc <menu_choice+0x188>)
 8000300:	f7ff ff6e 	bl	80001e0 <lcd_print>
			submenus_set(0, 10, 1);
 8000304:	2201      	movs	r2, #1
 8000306:	210a      	movs	r1, #10
 8000308:	2000      	movs	r0, #0
 800030a:	f7ff ff1f 	bl	800014c <submenus_set>
			submenus_esc(0);
 800030e:	2000      	movs	r0, #0
 8000310:	f7ff ff4e 	bl	80001b0 <submenus_esc>

			break;
 8000314:	e06a      	b.n	80003ec <menu_choice+0x178>
		case LIMIT_SETTINGS:
			lcd_print(limits_menu);
 8000316:	483a      	ldr	r0, [pc, #232]	; (8000400 <menu_choice+0x18c>)
 8000318:	f7ff ff62 	bl	80001e0 <lcd_print>
			submenus_set(1, 11, 2);
 800031c:	2202      	movs	r2, #2
 800031e:	210b      	movs	r1, #11
 8000320:	2001      	movs	r0, #1
 8000322:	f7ff ff13 	bl	800014c <submenus_set>
			submenus_esc(0);
 8000326:	2000      	movs	r0, #0
 8000328:	f7ff ff42 	bl	80001b0 <submenus_esc>
			break;
 800032c:	e05e      	b.n	80003ec <menu_choice+0x178>
		case CO2_SETTINGS:
			lcd_print(co2_settings_menu);
 800032e:	4835      	ldr	r0, [pc, #212]	; (8000404 <menu_choice+0x190>)
 8000330:	f7ff ff56 	bl	80001e0 <lcd_print>
			submenus_set(1, 13, 4);
 8000334:	2204      	movs	r2, #4
 8000336:	210d      	movs	r1, #13
 8000338:	2001      	movs	r0, #1
 800033a:	f7ff ff07 	bl	800014c <submenus_set>
			submenus_esc(0);
 800033e:	2000      	movs	r0, #0
 8000340:	f7ff ff36 	bl	80001b0 <submenus_esc>
			break;
 8000344:	e052      	b.n	80003ec <menu_choice+0x178>
		case ABOUT:
			lcd_print(about_menu);
 8000346:	4830      	ldr	r0, [pc, #192]	; (8000408 <menu_choice+0x194>)
 8000348:	f7ff ff4a 	bl	80001e0 <lcd_print>
			submenus_esc(0);
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ff2f 	bl	80001b0 <submenus_esc>
			break;
 8000352:	e04b      	b.n	80003ec <menu_choice+0x178>
		case device_adress:
			lcd_print(device_menu_address);
 8000354:	482d      	ldr	r0, [pc, #180]	; (800040c <menu_choice+0x198>)
 8000356:	f7ff ff43 	bl	80001e0 <lcd_print>
			submenus_esc(1);
 800035a:	2001      	movs	r0, #1
 800035c:	f7ff ff28 	bl	80001b0 <submenus_esc>
			break;
 8000360:	e044      	b.n	80003ec <menu_choice+0x178>
		case device_calibration:
			lcd_print(device_menu_calibration);
 8000362:	482b      	ldr	r0, [pc, #172]	; (8000410 <menu_choice+0x19c>)
 8000364:	f7ff ff3c 	bl	80001e0 <lcd_print>
			submenus_esc(1);
 8000368:	2001      	movs	r0, #1
 800036a:	f7ff ff21 	bl	80001b0 <submenus_esc>
			break;
 800036e:	e03d      	b.n	80003ec <menu_choice+0x178>
		case device_reset:
			lcd_print(device_menu_reset);
 8000370:	4828      	ldr	r0, [pc, #160]	; (8000414 <menu_choice+0x1a0>)
 8000372:	f7ff ff35 	bl	80001e0 <lcd_print>
			submenus_esc(1);
 8000376:	2001      	movs	r0, #1
 8000378:	f7ff ff1a 	bl	80001b0 <submenus_esc>
			break;
 800037c:	e036      	b.n	80003ec <menu_choice+0x178>
		case device_factory_reset:
			lcd_print(device_factory);
 800037e:	4826      	ldr	r0, [pc, #152]	; (8000418 <menu_choice+0x1a4>)
 8000380:	f7ff ff2e 	bl	80001e0 <lcd_print>
			submenus_esc(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f7ff ff13 	bl	80001b0 <submenus_esc>
		case temp_offset:
			lcd_print(temp_menu_offset);
 800038a:	4824      	ldr	r0, [pc, #144]	; (800041c <menu_choice+0x1a8>)
 800038c:	f7ff ff28 	bl	80001e0 <lcd_print>
			submenus_esc(2);
 8000390:	2002      	movs	r0, #2
 8000392:	f7ff ff0d 	bl	80001b0 <submenus_esc>
			break;
 8000396:	e029      	b.n	80003ec <menu_choice+0x178>
		case limits_temp:
			lcd_print(limits_menu_temp_limits);
 8000398:	4821      	ldr	r0, [pc, #132]	; (8000420 <menu_choice+0x1ac>)
 800039a:	f7ff ff21 	bl	80001e0 <lcd_print>
			submenus_esc(3);
 800039e:	2003      	movs	r0, #3
 80003a0:	f7ff ff06 	bl	80001b0 <submenus_esc>
			break;
 80003a4:	e022      	b.n	80003ec <menu_choice+0x178>
		case limits_co2:
			lcd_print(limits_menu_co2_limits);
 80003a6:	481f      	ldr	r0, [pc, #124]	; (8000424 <menu_choice+0x1b0>)
 80003a8:	f7ff ff1a 	bl	80001e0 <lcd_print>
			submenus_esc(3);
 80003ac:	2003      	movs	r0, #3
 80003ae:	f7ff feff 	bl	80001b0 <submenus_esc>
			break;
 80003b2:	e01b      	b.n	80003ec <menu_choice+0x178>
		case co2_temp_offset:
			lcd_print(co2_settings_menu_temp_offset);
 80003b4:	481c      	ldr	r0, [pc, #112]	; (8000428 <menu_choice+0x1b4>)
 80003b6:	f7ff ff13 	bl	80001e0 <lcd_print>
			submenus_esc(4);
 80003ba:	2004      	movs	r0, #4
 80003bc:	f7ff fef8 	bl	80001b0 <submenus_esc>
			break;
 80003c0:	e014      	b.n	80003ec <menu_choice+0x178>
		case co2_altitute:
			lcd_print(co2_settings_menu_altitute);
 80003c2:	481a      	ldr	r0, [pc, #104]	; (800042c <menu_choice+0x1b8>)
 80003c4:	f7ff ff0c 	bl	80001e0 <lcd_print>
			submenus_esc(4);
 80003c8:	2004      	movs	r0, #4
 80003ca:	f7ff fef1 	bl	80001b0 <submenus_esc>
			break;
 80003ce:	e00d      	b.n	80003ec <menu_choice+0x178>
		case co2_calibration:
			lcd_print(co2_settings_menu_calibration);
 80003d0:	4817      	ldr	r0, [pc, #92]	; (8000430 <menu_choice+0x1bc>)
 80003d2:	f7ff ff05 	bl	80001e0 <lcd_print>
			submenus_esc(4);
 80003d6:	2004      	movs	r0, #4
 80003d8:	f7ff feea 	bl	80001b0 <submenus_esc>
			break;
 80003dc:	e006      	b.n	80003ec <menu_choice+0x178>
		case co2_offsett:
			lcd_print(co2_settings_menu_offset);
 80003de:	4815      	ldr	r0, [pc, #84]	; (8000434 <menu_choice+0x1c0>)
 80003e0:	f7ff fefe 	bl	80001e0 <lcd_print>
			submenus_esc(4);
 80003e4:	2004      	movs	r0, #4
 80003e6:	f7ff fee3 	bl	80001b0 <submenus_esc>
			break;
 80003ea:	bf00      	nop
	}
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000008 	.word	0x20000008
 80003f8:	20000098 	.word	0x20000098
 80003fc:	20000308 	.word	0x20000308
 8000400:	20000428 	.word	0x20000428
 8000404:	200005d8 	.word	0x200005d8
 8000408:	20000860 	.word	0x20000860
 800040c:	20000110 	.word	0x20000110
 8000410:	20000188 	.word	0x20000188
 8000414:	20000278 	.word	0x20000278
 8000418:	20000200 	.word	0x20000200
 800041c:	20000398 	.word	0x20000398
 8000420:	200004b8 	.word	0x200004b8
 8000424:	20000548 	.word	0x20000548
 8000428:	20000668 	.word	0x20000668
 800042c:	200006f8 	.word	0x200006f8
 8000430:	20000770 	.word	0x20000770
 8000434:	200007e8 	.word	0x200007e8

08000438 <cross_clear>:

void cross_clear(int index)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	 static int menu_index_memory;

	  SSD1306_GotoXY(0,crossIndexLine[index]);
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <cross_clear+0x5c>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4413      	add	r3, r2
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	b29b      	uxth	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fba1 	bl	8000b94 <SSD1306_GotoXY>
	  SSD1306_Puts(">",&Font_7x10,1);
 8000452:	2201      	movs	r2, #1
 8000454:	4910      	ldr	r1, [pc, #64]	; (8000498 <cross_clear+0x60>)
 8000456:	4811      	ldr	r0, [pc, #68]	; (800049c <cross_clear+0x64>)
 8000458:	f000 fc32 	bl	8000cc0 <SSD1306_Puts>
	  if(index!=menu_index_memory)
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <cross_clear+0x68>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	429a      	cmp	r2, r3
 8000464:	d00d      	beq.n	8000482 <cross_clear+0x4a>
	  {
		  SSD1306_GotoXY(0,crossIndexLine[menu_index_memory]);
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <cross_clear+0x68>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <cross_clear+0x5c>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	b29b      	uxth	r3, r3
 8000470:	4619      	mov	r1, r3
 8000472:	2000      	movs	r0, #0
 8000474:	f000 fb8e 	bl	8000b94 <SSD1306_GotoXY>
		  SSD1306_Puts(" ",&Font_7x10,1);
 8000478:	2201      	movs	r2, #1
 800047a:	4907      	ldr	r1, [pc, #28]	; (8000498 <cross_clear+0x60>)
 800047c:	4809      	ldr	r0, [pc, #36]	; (80004a4 <cross_clear+0x6c>)
 800047e:	f000 fc1f 	bl	8000cc0 <SSD1306_Puts>
	  }
	  SSD1306_UpdateScreen();
 8000482:	f000 fae3 	bl	8000a4c <SSD1306_UpdateScreen>
	  menu_index_memory=index;
 8000486:	4a06      	ldr	r2, [pc, #24]	; (80004a0 <cross_clear+0x68>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6013      	str	r3, [r2, #0]


}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200008d8 	.word	0x200008d8
 8000498:	20000000 	.word	0x20000000
 800049c:	08003208 	.word	0x08003208
 80004a0:	200009c8 	.word	0x200009c8
 80004a4:	0800320c 	.word	0x0800320c

080004a8 <buton_flag_function>:


int buton_flag_function()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	if(!DOWN_BUTON)
 80004ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004b0:	4819      	ldr	r0, [pc, #100]	; (8000518 <buton_flag_function+0x70>)
 80004b2:	f001 f8d7 	bl	8001664 <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d104      	bne.n	80004c6 <buton_flag_function+0x1e>
	{
		buton_down_flag=1;
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <buton_flag_function+0x74>)
 80004be:	2201      	movs	r2, #1
 80004c0:	601a      	str	r2, [r3, #0]
		return 1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	e026      	b.n	8000514 <buton_flag_function+0x6c>
	}
	else if(!UP_BUTON)
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	4815      	ldr	r0, [pc, #84]	; (8000520 <buton_flag_function+0x78>)
 80004cc:	f001 f8ca 	bl	8001664 <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d104      	bne.n	80004e0 <buton_flag_function+0x38>
	{
		buton_up_flag=1;
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <buton_flag_function+0x7c>)
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
		return 2;
 80004dc:	2302      	movs	r3, #2
 80004de:	e019      	b.n	8000514 <buton_flag_function+0x6c>
	}

	else if(!ESC_BUTON)
 80004e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e4:	480c      	ldr	r0, [pc, #48]	; (8000518 <buton_flag_function+0x70>)
 80004e6:	f001 f8bd 	bl	8001664 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d104      	bne.n	80004fa <buton_flag_function+0x52>
	{
		buton_esc_flag=1;
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <buton_flag_function+0x80>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
		return 3;
 80004f6:	2303      	movs	r3, #3
 80004f8:	e00c      	b.n	8000514 <buton_flag_function+0x6c>
	}
	else if(!SET_BUTON)
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <buton_flag_function+0x70>)
 80004fe:	f001 f8b1 	bl	8001664 <HAL_GPIO_ReadPin>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d104      	bne.n	8000512 <buton_flag_function+0x6a>
	{
		buton_set_flag=1;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <buton_flag_function+0x84>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]

		return 4;
 800050e:	2304      	movs	r3, #4
 8000510:	e000      	b.n	8000514 <buton_flag_function+0x6c>
	}
	else {
		return 0;
 8000512:	2300      	movs	r3, #0
	}
}
 8000514:	4618      	mov	r0, r3
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40010c00 	.word	0x40010c00
 800051c:	200009ac 	.word	0x200009ac
 8000520:	40011000 	.word	0x40011000
 8000524:	200009a8 	.word	0x200009a8
 8000528:	200009b0 	.word	0x200009b0
 800052c:	200009b4 	.word	0x200009b4

08000530 <buton_flag>:


void buton_flag(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	button_flag=buton_flag_function();
 8000534:	f7ff ffb8 	bl	80004a8 <buton_flag_function>
 8000538:	4603      	mov	r3, r0
 800053a:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <buton_flag+0x94>)
 800053c:	6013      	str	r3, [r2, #0]

	if(button_flag==0)
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <buton_flag+0x94>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d13b      	bne.n	80005be <buton_flag+0x8e>
	{

		if(buton_up_flag)
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <buton_flag+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d00f      	beq.n	800056e <buton_flag+0x3e>
		{
			menu_index--;
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <buton_flag+0x9c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <buton_flag+0x9c>)
 8000556:	6013      	str	r3, [r2, #0]
			if(menu_index>MAX_VALUE_INDEX-1)
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <buton_flag+0x9c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b04      	cmp	r3, #4
 800055e:	dd02      	ble.n	8000566 <buton_flag+0x36>
			{
				menu_index=0;
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <buton_flag+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
			}
			buton_up_flag=0;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <buton_flag+0x98>)
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	e022      	b.n	80005b4 <buton_flag+0x84>
		}
		else if(buton_down_flag)
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <buton_flag+0xa0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00f      	beq.n	8000596 <buton_flag+0x66>
		{
			menu_index++;
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <buton_flag+0x9c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <buton_flag+0x9c>)
 800057e:	6013      	str	r3, [r2, #0]
			if(menu_index>MAX_VALUE_INDEX-1)
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <buton_flag+0x9c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b04      	cmp	r3, #4
 8000586:	dd02      	ble.n	800058e <buton_flag+0x5e>
			{
				menu_index=0;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <buton_flag+0x9c>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
			}
			buton_down_flag=0;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <buton_flag+0xa0>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	e00e      	b.n	80005b4 <buton_flag+0x84>
		}
		else if(buton_esc_flag)
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <buton_flag+0xa4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d003      	beq.n	80005a6 <buton_flag+0x76>
		{
			buton_esc_flag = 0;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <buton_flag+0xa4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	e006      	b.n	80005b4 <buton_flag+0x84>
		}
		else if(buton_set_flag)
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <buton_flag+0xa8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <buton_flag+0x84>
		{

			buton_set_flag = 0;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <buton_flag+0xa8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
		}
		cross_clear(menu_index);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <buton_flag+0x9c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff3d 	bl	8000438 <cross_clear>
	}

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200009c0 	.word	0x200009c0
 80005c8:	200009a8 	.word	0x200009a8
 80005cc:	200009bc 	.word	0x200009bc
 80005d0:	200009ac 	.word	0x200009ac
 80005d4:	200009b0 	.word	0x200009b0
 80005d8:	200009b4 	.word	0x200009b4

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd4c 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81e 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8d8 	bl	800079c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ec:	f000 f856 	bl	800069c <MX_I2C1_Init>
  MX_TIM1_Init();
 80005f0:	f000 f882 	bl	80006f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <main+0x3c>)
 80005f6:	f002 fa1b 	bl	8002a30 <HAL_TIM_Base_Start_IT>
  SSD1306_Init();
 80005fa:	f000 f963 	bl	80008c4 <SSD1306_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   if(main_menu_flag)
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <main+0x40>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0fb      	beq.n	80005fe <main+0x22>
	  {
		  buton_flag();
 8000606:	f7ff ff93 	bl	8000530 <buton_flag>
		  page_buffer_choice(page_count);
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <main+0x44>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fe14 	bl	800023c <page_buffer_choice>
	   if(main_menu_flag)
 8000614:	e7f3      	b.n	80005fe <main+0x22>
 8000616:	bf00      	nop
 8000618:	2000095c 	.word	0x2000095c
 800061c:	200009a4 	.word	0x200009a4
 8000620:	200009b8 	.word	0x200009b8

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b090      	sub	sp, #64	; 0x40
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	2228      	movs	r2, #40	; 0x28
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fdca 	bl	80031cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064a:	2301      	movs	r3, #1
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2310      	movs	r3, #16
 8000650:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000652:	2300      	movs	r3, #0
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fd92 	bl	8002184 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000666:	f000 f927 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f800 	bl	8002688 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800068e:	f000 f913 	bl	80008b8 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3740      	adds	r7, #64	; 0x40
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C1_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C1_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C1_Init+0x50>)
 80006da:	f000 ffdb 	bl	8001694 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 f8e8 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000908 	.word	0x20000908
 80006f0:	40005400 	.word	0x40005400
 80006f4:	00061a80 	.word	0x00061a80

080006f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_TIM1_Init+0x9c>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <MX_TIM1_Init+0xa0>)
 8000718:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_TIM1_Init+0x9c>)
 800071c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000720:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_TIM1_Init+0x9c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_TIM1_Init+0x9c>)
 800072a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800072e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_TIM1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_TIM1_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_TIM1_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <MX_TIM1_Init+0x9c>)
 8000744:	f002 f924 	bl	8002990 <HAL_TIM_Base_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800074e:	f000 f8b3 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4619      	mov	r1, r3
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_TIM1_Init+0x9c>)
 8000760:	f002 fac0 	bl	8002ce4 <HAL_TIM_ConfigClockSource>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800076a:	f000 f8a5 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_TIM1_Init+0x9c>)
 800077c:	f002 fc92 	bl	80030a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000786:	f000 f897 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000095c 	.word	0x2000095c
 8000798:	40012c00 	.word	0x40012c00

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xb0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a25      	ldr	r2, [pc, #148]	; (800084c <MX_GPIO_Init+0xb0>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xb0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0310 	and.w	r3, r3, #16
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0xb0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a1f      	ldr	r2, [pc, #124]	; (800084c <MX_GPIO_Init+0xb0>)
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_GPIO_Init+0xb0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_GPIO_Init+0xb0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <MX_GPIO_Init+0xb0>)
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_GPIO_Init+0xb0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_GPIO_Init+0xb0>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_GPIO_Init+0xb0>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_GPIO_Init+0xb0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : btn_up_Pin */
  GPIO_InitStruct.Pin = btn_up_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn_up_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	480a      	ldr	r0, [pc, #40]	; (8000850 <MX_GPIO_Init+0xb4>)
 8000826:	f000 fd99 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_esc_Pin btn_set_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_esc_Pin|btn_set_Pin;
 800082a:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000834:	2302      	movs	r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0xb8>)
 8000840:	f000 fd8c 	bl	800135c <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	40011000 	.word	0x40011000
 8000854:	40010c00 	.word	0x40010c00

08000858 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int time_count = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if(!SET_BUTON)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000864:	f000 fefe 	bl	8001664 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d105      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		time_buton++;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	e005      	b.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x2e>
	}
	else
	{
		time_buton=0;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
		buton_set_flag=0;
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
	}

	if(time_buton == 5)
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b05      	cmp	r3, #5
 800088c:	d108      	bne.n	80008a0 <HAL_TIM_PeriodElapsedCallback+0x48>
	{
		buton_set_flag=1;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
		main_menu_flag=1;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
		time_buton=0;
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
	}


}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	200009c4 	.word	0x200009c4
 80008b0:	200009b4 	.word	0x200009b4
 80008b4:	200009a4 	.word	0x200009a4

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80008ca:	f000 fa27 	bl	8000d1c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80008ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008d2:	2201      	movs	r2, #1
 80008d4:	2178      	movs	r1, #120	; 0x78
 80008d6:	485b      	ldr	r0, [pc, #364]	; (8000a44 <SSD1306_Init+0x180>)
 80008d8:	f001 f91e 	bl	8001b18 <HAL_I2C_IsDeviceReady>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e0a9      	b.n	8000a3a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80008ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008ec:	e002      	b.n	80008f4 <SSD1306_Init+0x30>
		p--;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f9      	bne.n	80008ee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80008fa:	22ae      	movs	r2, #174	; 0xae
 80008fc:	2100      	movs	r1, #0
 80008fe:	2078      	movs	r0, #120	; 0x78
 8000900:	f000 fa86 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000904:	2220      	movs	r2, #32
 8000906:	2100      	movs	r1, #0
 8000908:	2078      	movs	r0, #120	; 0x78
 800090a:	f000 fa81 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800090e:	2210      	movs	r2, #16
 8000910:	2100      	movs	r1, #0
 8000912:	2078      	movs	r0, #120	; 0x78
 8000914:	f000 fa7c 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000918:	22b0      	movs	r2, #176	; 0xb0
 800091a:	2100      	movs	r1, #0
 800091c:	2078      	movs	r0, #120	; 0x78
 800091e:	f000 fa77 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000922:	22c8      	movs	r2, #200	; 0xc8
 8000924:	2100      	movs	r1, #0
 8000926:	2078      	movs	r0, #120	; 0x78
 8000928:	f000 fa72 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800092c:	2200      	movs	r2, #0
 800092e:	2100      	movs	r1, #0
 8000930:	2078      	movs	r0, #120	; 0x78
 8000932:	f000 fa6d 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000936:	2210      	movs	r2, #16
 8000938:	2100      	movs	r1, #0
 800093a:	2078      	movs	r0, #120	; 0x78
 800093c:	f000 fa68 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000940:	2240      	movs	r2, #64	; 0x40
 8000942:	2100      	movs	r1, #0
 8000944:	2078      	movs	r0, #120	; 0x78
 8000946:	f000 fa63 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800094a:	2281      	movs	r2, #129	; 0x81
 800094c:	2100      	movs	r1, #0
 800094e:	2078      	movs	r0, #120	; 0x78
 8000950:	f000 fa5e 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000954:	22ff      	movs	r2, #255	; 0xff
 8000956:	2100      	movs	r1, #0
 8000958:	2078      	movs	r0, #120	; 0x78
 800095a:	f000 fa59 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800095e:	22a1      	movs	r2, #161	; 0xa1
 8000960:	2100      	movs	r1, #0
 8000962:	2078      	movs	r0, #120	; 0x78
 8000964:	f000 fa54 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000968:	22a6      	movs	r2, #166	; 0xa6
 800096a:	2100      	movs	r1, #0
 800096c:	2078      	movs	r0, #120	; 0x78
 800096e:	f000 fa4f 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000972:	22a8      	movs	r2, #168	; 0xa8
 8000974:	2100      	movs	r1, #0
 8000976:	2078      	movs	r0, #120	; 0x78
 8000978:	f000 fa4a 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800097c:	223f      	movs	r2, #63	; 0x3f
 800097e:	2100      	movs	r1, #0
 8000980:	2078      	movs	r0, #120	; 0x78
 8000982:	f000 fa45 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000986:	22a4      	movs	r2, #164	; 0xa4
 8000988:	2100      	movs	r1, #0
 800098a:	2078      	movs	r0, #120	; 0x78
 800098c:	f000 fa40 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000990:	22d3      	movs	r2, #211	; 0xd3
 8000992:	2100      	movs	r1, #0
 8000994:	2078      	movs	r0, #120	; 0x78
 8000996:	f000 fa3b 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2078      	movs	r0, #120	; 0x78
 80009a0:	f000 fa36 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009a4:	22d5      	movs	r2, #213	; 0xd5
 80009a6:	2100      	movs	r1, #0
 80009a8:	2078      	movs	r0, #120	; 0x78
 80009aa:	f000 fa31 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009ae:	22f0      	movs	r2, #240	; 0xf0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2078      	movs	r0, #120	; 0x78
 80009b4:	f000 fa2c 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80009b8:	22d9      	movs	r2, #217	; 0xd9
 80009ba:	2100      	movs	r1, #0
 80009bc:	2078      	movs	r0, #120	; 0x78
 80009be:	f000 fa27 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80009c2:	2222      	movs	r2, #34	; 0x22
 80009c4:	2100      	movs	r1, #0
 80009c6:	2078      	movs	r0, #120	; 0x78
 80009c8:	f000 fa22 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80009cc:	22da      	movs	r2, #218	; 0xda
 80009ce:	2100      	movs	r1, #0
 80009d0:	2078      	movs	r0, #120	; 0x78
 80009d2:	f000 fa1d 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80009d6:	2212      	movs	r2, #18
 80009d8:	2100      	movs	r1, #0
 80009da:	2078      	movs	r0, #120	; 0x78
 80009dc:	f000 fa18 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009e0:	22db      	movs	r2, #219	; 0xdb
 80009e2:	2100      	movs	r1, #0
 80009e4:	2078      	movs	r0, #120	; 0x78
 80009e6:	f000 fa13 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009ea:	2220      	movs	r2, #32
 80009ec:	2100      	movs	r1, #0
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f000 fa0e 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009f4:	228d      	movs	r2, #141	; 0x8d
 80009f6:	2100      	movs	r1, #0
 80009f8:	2078      	movs	r0, #120	; 0x78
 80009fa:	f000 fa09 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80009fe:	2214      	movs	r2, #20
 8000a00:	2100      	movs	r1, #0
 8000a02:	2078      	movs	r0, #120	; 0x78
 8000a04:	f000 fa04 	bl	8000e10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a08:	22af      	movs	r2, #175	; 0xaf
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2078      	movs	r0, #120	; 0x78
 8000a0e:	f000 f9ff 	bl	8000e10 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a12:	222e      	movs	r2, #46	; 0x2e
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	; 0x78
 8000a18:	f000 f9fa 	bl	8000e10 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 f843 	bl	8000aa8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a22:	f000 f813 	bl	8000a4c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <SSD1306_Init+0x184>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SSD1306_Init+0x184>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <SSD1306_Init+0x184>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a38:	2301      	movs	r3, #1
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000908 	.word	0x20000908
 8000a48:	20000dcc 	.word	0x20000dcc

08000a4c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e01d      	b.n	8000a94 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	3b50      	subs	r3, #80	; 0x50
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	2078      	movs	r0, #120	; 0x78
 8000a64:	f000 f9d4 	bl	8000e10 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2078      	movs	r0, #120	; 0x78
 8000a6e:	f000 f9cf 	bl	8000e10 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a72:	2210      	movs	r2, #16
 8000a74:	2100      	movs	r1, #0
 8000a76:	2078      	movs	r0, #120	; 0x78
 8000a78:	f000 f9ca 	bl	8000e10 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	01db      	lsls	r3, r3, #7
 8000a80:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <SSD1306_UpdateScreen+0x58>)
 8000a82:	441a      	add	r2, r3
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	2078      	movs	r0, #120	; 0x78
 8000a8a:	f000 f95b 	bl	8000d44 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	3301      	adds	r3, #1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	d9de      	bls.n	8000a58 <SSD1306_UpdateScreen+0xc>
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200009cc 	.word	0x200009cc

08000aa8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <SSD1306_Fill+0x14>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e000      	b.n	8000abe <SSD1306_Fill+0x16>
 8000abc:	23ff      	movs	r3, #255	; 0xff
 8000abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <SSD1306_Fill+0x2c>)
 8000ac6:	f002 fb81 	bl	80031cc <memset>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200009cc 	.word	0x200009cc

08000ad8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	80bb      	strh	r3, [r7, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	70fb      	strb	r3, [r7, #3]
	if (
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	2b7f      	cmp	r3, #127	; 0x7f
 8000aee:	d848      	bhi.n	8000b82 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	2b3f      	cmp	r3, #63	; 0x3f
 8000af4:	d845      	bhi.n	8000b82 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <SSD1306_DrawPixel+0xb4>)
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d11a      	bne.n	8000b48 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b12:	88fa      	ldrh	r2, [r7, #6]
 8000b14:	88bb      	ldrh	r3, [r7, #4]
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	b298      	uxth	r0, r3
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	01db      	lsls	r3, r3, #7
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <SSD1306_DrawPixel+0xb8>)
 8000b22:	5cd3      	ldrb	r3, [r2, r3]
 8000b24:	b25a      	sxtb	r2, r3
 8000b26:	88bb      	ldrh	r3, [r7, #4]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	b25b      	sxtb	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b259      	sxtb	r1, r3
 8000b38:	88fa      	ldrh	r2, [r7, #6]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	01db      	lsls	r3, r3, #7
 8000b3e:	4413      	add	r3, r2
 8000b40:	b2c9      	uxtb	r1, r1
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <SSD1306_DrawPixel+0xb8>)
 8000b44:	54d1      	strb	r1, [r2, r3]
 8000b46:	e01d      	b.n	8000b84 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b48:	88fa      	ldrh	r2, [r7, #6]
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	08db      	lsrs	r3, r3, #3
 8000b4e:	b298      	uxth	r0, r3
 8000b50:	4603      	mov	r3, r0
 8000b52:	01db      	lsls	r3, r3, #7
 8000b54:	4413      	add	r3, r2
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <SSD1306_DrawPixel+0xb8>)
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	b25a      	sxtb	r2, r3
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	2101      	movs	r1, #1
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	4013      	ands	r3, r2
 8000b70:	b259      	sxtb	r1, r3
 8000b72:	88fa      	ldrh	r2, [r7, #6]
 8000b74:	4603      	mov	r3, r0
 8000b76:	01db      	lsls	r3, r3, #7
 8000b78:	4413      	add	r3, r2
 8000b7a:	b2c9      	uxtb	r1, r1
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <SSD1306_DrawPixel+0xb8>)
 8000b7e:	54d1      	strb	r1, [r2, r3]
 8000b80:	e000      	b.n	8000b84 <SSD1306_DrawPixel+0xac>
		return;
 8000b82:	bf00      	nop
	}
}
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000dcc 	.word	0x20000dcc
 8000b90:	200009cc 	.word	0x200009cc

08000b94 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	80fb      	strh	r3, [r7, #6]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SSD1306_GotoXY+0x28>)
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <SSD1306_GotoXY+0x28>)
 8000bac:	88bb      	ldrh	r3, [r7, #4]
 8000bae:	8053      	strh	r3, [r2, #2]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000dcc 	.word	0x20000dcc

08000bc0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bd0:	4b3a      	ldr	r3, [pc, #232]	; (8000cbc <SSD1306_Putc+0xfc>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
	if (
 8000bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bde:	dc07      	bgt.n	8000bf0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000be0:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <SSD1306_Putc+0xfc>)
 8000be2:	885b      	ldrh	r3, [r3, #2]
 8000be4:	461a      	mov	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	785b      	ldrb	r3, [r3, #1]
 8000bea:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bec:	2b3f      	cmp	r3, #63	; 0x3f
 8000bee:	dd01      	ble.n	8000bf4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e05e      	b.n	8000cb2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e04b      	b.n	8000c92 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	3b20      	subs	r3, #32
 8000c02:	6839      	ldr	r1, [r7, #0]
 8000c04:	7849      	ldrb	r1, [r1, #1]
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	e030      	b.n	8000c80 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d010      	beq.n	8000c50 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <SSD1306_Putc+0xfc>)
 8000c30:	881a      	ldrh	r2, [r3, #0]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	4413      	add	r3, r2
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <SSD1306_Putc+0xfc>)
 8000c3c:	885a      	ldrh	r2, [r3, #2]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	4413      	add	r3, r2
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	79ba      	ldrb	r2, [r7, #6]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff ff45 	bl	8000ad8 <SSD1306_DrawPixel>
 8000c4e:	e014      	b.n	8000c7a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <SSD1306_Putc+0xfc>)
 8000c52:	881a      	ldrh	r2, [r3, #0]
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	b298      	uxth	r0, r3
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <SSD1306_Putc+0xfc>)
 8000c5e:	885a      	ldrh	r2, [r3, #2]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	b299      	uxth	r1, r3
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	bf0c      	ite	eq
 8000c6e:	2301      	moveq	r3, #1
 8000c70:	2300      	movne	r3, #0
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	f7ff ff2f 	bl	8000ad8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d3c8      	bcc.n	8000c1e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	461a      	mov	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d3ad      	bcc.n	8000bfa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <SSD1306_Putc+0xfc>)
 8000ca0:	881a      	ldrh	r2, [r3, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	4413      	add	r3, r2
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <SSD1306_Putc+0xfc>)
 8000cae:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000dcc 	.word	0x20000dcc

08000cc0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000cce:	e012      	b.n	8000cf6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff71 	bl	8000bc0 <SSD1306_Putc>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d002      	beq.n	8000cf0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	e008      	b.n	8000d02 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1e8      	bne.n	8000cd0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	781b      	ldrb	r3, [r3, #0]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff feca 	bl	8000aa8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000d14:	f7ff fe9a 	bl	8000a4c <SSD1306_UpdateScreen>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <ssd1306_I2C_Init+0x24>)
 8000d24:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d26:	e002      	b.n	8000d2e <ssd1306_I2C_Init+0x12>
		p--;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f9      	bne.n	8000d28 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	0003d090 	.word	0x0003d090

08000d44 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b0c7      	sub	sp, #284	; 0x11c
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000d52:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000d56:	600a      	str	r2, [r1, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d5e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d62:	4622      	mov	r2, r4
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d6a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000d6e:	4602      	mov	r2, r0
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000d86:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d8a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d98:	e015      	b.n	8000dc6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000d9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d9e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000da2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	441a      	add	r2, r3
 8000daa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dae:	3301      	adds	r3, #1
 8000db0:	7811      	ldrb	r1, [r2, #0]
 8000db2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000db6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000dba:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000dbc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000dc6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000dd0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000dd4:	8812      	ldrh	r2, [r2, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d8df      	bhi.n	8000d9a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dde:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b299      	uxth	r1, r3
 8000de6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000dea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	f107 020c 	add.w	r2, r7, #12
 8000df8:	200a      	movs	r0, #10
 8000dfa:	9000      	str	r0, [sp, #0]
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <ssd1306_I2C_WriteMulti+0xc8>)
 8000dfe:	f000 fd8d 	bl	800191c <HAL_I2C_Master_Transmit>
}
 8000e02:	bf00      	nop
 8000e04:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	20000908 	.word	0x20000908

08000e10 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	71bb      	strb	r3, [r7, #6]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000e26:	797b      	ldrb	r3, [r7, #5]
 8000e28:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	f107 020c 	add.w	r2, r7, #12
 8000e32:	230a      	movs	r3, #10
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2302      	movs	r3, #2
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <ssd1306_I2C_Write+0x38>)
 8000e3a:	f000 fd6f 	bl	800191c <HAL_I2C_Master_Transmit>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000908 	.word	0x20000908

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_MspInit+0x60>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_MspInit+0x60>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_I2C_MspInit+0x90>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d132      	bne.n	8000f36 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_I2C_MspInit+0x94>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <HAL_I2C_MspInit+0x94>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_I2C_MspInit+0x94>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eee:	2312      	movs	r3, #18
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4812      	ldr	r0, [pc, #72]	; (8000f48 <HAL_I2C_MspInit+0x98>)
 8000efe:	f000 fa2d 	bl	800135c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_I2C_MspInit+0x9c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <HAL_I2C_MspInit+0x9c>)
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_I2C_MspInit+0x94>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_I2C_MspInit+0x94>)
 8000f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_I2C_MspInit+0x94>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40005400 	.word	0x40005400
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010c00 	.word	0x40010c00
 8000f4c:	40010000 	.word	0x40010000

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_TIM_Base_MspInit+0x54>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d11b      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_TIM_Base_MspInit+0x58>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <HAL_TIM_Base_MspInit+0x58>)
 8000f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <HAL_TIM_Base_MspInit+0x58>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2018      	movs	r0, #24
 8000f80:	f000 f9b5 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000f84:	2018      	movs	r0, #24
 8000f86:	f000 f9ce 	bl	8001326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2019      	movs	r0, #25
 8000f90:	f000 f9ad 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f94:	2019      	movs	r0, #25
 8000f96:	f000 f9c6 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 f889 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM1_BRK_IRQHandler+0x10>)
 8001002:	f001 fd67 	bl	8002ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000095c 	.word	0x2000095c

08001010 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM1_UP_IRQHandler+0x10>)
 8001016:	f001 fd5d 	bl	8002ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000095c 	.word	0x2000095c

08001024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001056:	f7ff ffe5 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f002 f893 	bl	8003184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105e:	f7ff fabd 	bl	80005dc <main>
  bx lr
 8001062:	4770      	bx	lr
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	200008ec 	.word	0x200008ec
  ldr r2, =_sidata
 800106c:	080039ac 	.word	0x080039ac
  ldr r2, =_sbss
 8001070:	200008ec 	.word	0x200008ec
  ldr r4, =_ebss
 8001074:	20000dd8 	.word	0x20000dd8

08001078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x28>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x28>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f923 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fed8 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f93b 	bl	8001342 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f903 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200008e0 	.word	0x200008e0
 8001100:	200008e8 	.word	0x200008e8
 8001104:	200008e4 	.word	0x200008e4

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x1c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x20>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a03      	ldr	r2, [pc, #12]	; (8001128 <HAL_IncTick+0x20>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	200008e8 	.word	0x200008e8
 8001128:	20000dd4 	.word	0x20000dd4

0800112c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b02      	ldr	r3, [pc, #8]	; (800113c <HAL_GetTick+0x10>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	20000dd4 	.word	0x20000dd4

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4906      	ldr	r1, [pc, #24]	; (80011d8 <__NVIC_EnableIRQ+0x34>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff90 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff2d 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff42 	bl	8001188 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff90 	bl	8001230 <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5f 	bl	80011dc <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff35 	bl	80011a4 <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	e169      	b.n	8001644 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001370:	2201      	movs	r2, #1
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8158 	bne.w	800163e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a9a      	ldr	r2, [pc, #616]	; (80015fc <HAL_GPIO_Init+0x2a0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d05e      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 8001398:	4a98      	ldr	r2, [pc, #608]	; (80015fc <HAL_GPIO_Init+0x2a0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d875      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 800139e:	4a98      	ldr	r2, [pc, #608]	; (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d058      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013a4:	4a96      	ldr	r2, [pc, #600]	; (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d86f      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013aa:	4a96      	ldr	r2, [pc, #600]	; (8001604 <HAL_GPIO_Init+0x2a8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d052      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013b0:	4a94      	ldr	r2, [pc, #592]	; (8001604 <HAL_GPIO_Init+0x2a8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d869      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013b6:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_GPIO_Init+0x2ac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d04c      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013bc:	4a92      	ldr	r2, [pc, #584]	; (8001608 <HAL_GPIO_Init+0x2ac>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d863      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013c2:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_GPIO_Init+0x2b0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d046      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013c8:	4a90      	ldr	r2, [pc, #576]	; (800160c <HAL_GPIO_Init+0x2b0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d85d      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d82a      	bhi.n	8001428 <HAL_GPIO_Init+0xcc>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d859      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <HAL_GPIO_Init+0x80>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001431 	.word	0x08001431
 80013e4:	08001443 	.word	0x08001443
 80013e8:	08001485 	.word	0x08001485
 80013ec:	0800148b 	.word	0x0800148b
 80013f0:	0800148b 	.word	0x0800148b
 80013f4:	0800148b 	.word	0x0800148b
 80013f8:	0800148b 	.word	0x0800148b
 80013fc:	0800148b 	.word	0x0800148b
 8001400:	0800148b 	.word	0x0800148b
 8001404:	0800148b 	.word	0x0800148b
 8001408:	0800148b 	.word	0x0800148b
 800140c:	0800148b 	.word	0x0800148b
 8001410:	0800148b 	.word	0x0800148b
 8001414:	0800148b 	.word	0x0800148b
 8001418:	0800148b 	.word	0x0800148b
 800141c:	0800148b 	.word	0x0800148b
 8001420:	08001439 	.word	0x08001439
 8001424:	0800144d 	.word	0x0800144d
 8001428:	4a79      	ldr	r2, [pc, #484]	; (8001610 <HAL_GPIO_Init+0x2b4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800142e:	e02c      	b.n	800148a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e029      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	3304      	adds	r3, #4
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e024      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	3308      	adds	r3, #8
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e01f      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	330c      	adds	r3, #12
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e01a      	b.n	800148c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145e:	2304      	movs	r3, #4
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e013      	b.n	800148c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d105      	bne.n	8001478 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]
          break;
 8001476:	e009      	b.n	800148c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001478:	2308      	movs	r3, #8
 800147a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	615a      	str	r2, [r3, #20]
          break;
 8001482:	e003      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x130>
          break;
 800148a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	; 0xff
 8001490:	d801      	bhi.n	8001496 <HAL_GPIO_Init+0x13a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	e001      	b.n	800149a <HAL_GPIO_Init+0x13e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d802      	bhi.n	80014a8 <HAL_GPIO_Init+0x14c>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0x152>
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	3b08      	subs	r3, #8
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	210f      	movs	r1, #15
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	6a39      	ldr	r1, [r7, #32]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80b1 	beq.w	800163e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014dc:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2bc>)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a40      	ldr	r2, [pc, #256]	; (800161c <HAL_GPIO_Init+0x2c0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1ec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3f      	ldr	r2, [pc, #252]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1e8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3e      	ldr	r2, [pc, #248]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1e4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1e0>
 8001538:	2303      	movs	r3, #3
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 800153c:	2304      	movs	r3, #4
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001548:	2300      	movs	r3, #0
 800154a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155a:	492f      	ldr	r1, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x2bc>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	492c      	ldr	r1, [pc, #176]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4928      	ldr	r1, [pc, #160]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4922      	ldr	r1, [pc, #136]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	491e      	ldr	r1, [pc, #120]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4914      	ldr	r1, [pc, #80]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d021      	beq.n	8001630 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	490e      	ldr	r1, [pc, #56]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e021      	b.n	800163e <HAL_GPIO_Init+0x2e2>
 80015fa:	bf00      	nop
 80015fc:	10320000 	.word	0x10320000
 8001600:	10310000 	.word	0x10310000
 8001604:	10220000 	.word	0x10220000
 8001608:	10210000 	.word	0x10210000
 800160c:	10120000 	.word	0x10120000
 8001610:	10110000 	.word	0x10110000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40011000 	.word	0x40011000
 8001628:	40011400 	.word	0x40011400
 800162c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_GPIO_Init+0x304>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	4909      	ldr	r1, [pc, #36]	; (8001660 <HAL_GPIO_Init+0x304>)
 800163a:	4013      	ands	r3, r2
 800163c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3301      	adds	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	f47f ae8e 	bne.w	8001370 <HAL_GPIO_Init+0x14>
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	372c      	adds	r7, #44	; 0x2c
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e001      	b.n	8001686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
	...

08001694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e12b      	b.n	80018fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fbf8 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2224      	movs	r2, #36	; 0x24
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016f8:	f001 f918 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 80016fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a81      	ldr	r2, [pc, #516]	; (8001908 <HAL_I2C_Init+0x274>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d807      	bhi.n	8001718 <HAL_I2C_Init+0x84>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a80      	ldr	r2, [pc, #512]	; (800190c <HAL_I2C_Init+0x278>)
 800170c:	4293      	cmp	r3, r2
 800170e:	bf94      	ite	ls
 8001710:	2301      	movls	r3, #1
 8001712:	2300      	movhi	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	e006      	b.n	8001726 <HAL_I2C_Init+0x92>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a7d      	ldr	r2, [pc, #500]	; (8001910 <HAL_I2C_Init+0x27c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	bf94      	ite	ls
 8001720:	2301      	movls	r3, #1
 8001722:	2300      	movhi	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0e7      	b.n	80018fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a78      	ldr	r2, [pc, #480]	; (8001914 <HAL_I2C_Init+0x280>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	0c9b      	lsrs	r3, r3, #18
 8001738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	430a      	orrs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a6a      	ldr	r2, [pc, #424]	; (8001908 <HAL_I2C_Init+0x274>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d802      	bhi.n	8001768 <HAL_I2C_Init+0xd4>
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3301      	adds	r3, #1
 8001766:	e009      	b.n	800177c <HAL_I2C_Init+0xe8>
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	4a69      	ldr	r2, [pc, #420]	; (8001918 <HAL_I2C_Init+0x284>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	3301      	adds	r3, #1
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	430b      	orrs	r3, r1
 8001782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800178e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	495c      	ldr	r1, [pc, #368]	; (8001908 <HAL_I2C_Init+0x274>)
 8001798:	428b      	cmp	r3, r1
 800179a:	d819      	bhi.n	80017d0 <HAL_I2C_Init+0x13c>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1e59      	subs	r1, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017aa:	1c59      	adds	r1, r3, #1
 80017ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017b0:	400b      	ands	r3, r1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00a      	beq.n	80017cc <HAL_I2C_Init+0x138>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1e59      	subs	r1, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ca:	e051      	b.n	8001870 <HAL_I2C_Init+0x1dc>
 80017cc:	2304      	movs	r3, #4
 80017ce:	e04f      	b.n	8001870 <HAL_I2C_Init+0x1dc>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d111      	bne.n	80017fc <HAL_I2C_Init+0x168>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1e58      	subs	r0, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	440b      	add	r3, r1
 80017e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	e012      	b.n	8001822 <HAL_I2C_Init+0x18e>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1e58      	subs	r0, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	0099      	lsls	r1, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001812:	3301      	adds	r3, #1
 8001814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf0c      	ite	eq
 800181c:	2301      	moveq	r3, #1
 800181e:	2300      	movne	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Init+0x196>
 8001826:	2301      	movs	r3, #1
 8001828:	e022      	b.n	8001870 <HAL_I2C_Init+0x1dc>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10e      	bne.n	8001850 <HAL_I2C_Init+0x1bc>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1e58      	subs	r0, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6859      	ldr	r1, [r3, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	440b      	add	r3, r1
 8001840:	fbb0 f3f3 	udiv	r3, r0, r3
 8001844:	3301      	adds	r3, #1
 8001846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184e:	e00f      	b.n	8001870 <HAL_I2C_Init+0x1dc>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e58      	subs	r0, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	0099      	lsls	r1, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	fbb0 f3f3 	udiv	r3, r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	6809      	ldr	r1, [r1, #0]
 8001874:	4313      	orrs	r3, r2
 8001876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800189e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6911      	ldr	r1, [r2, #16]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68d2      	ldr	r2, [r2, #12]
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	000186a0 	.word	0x000186a0
 800190c:	001e847f 	.word	0x001e847f
 8001910:	003d08ff 	.word	0x003d08ff
 8001914:	431bde83 	.word	0x431bde83
 8001918:	10624dd3 	.word	0x10624dd3

0800191c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af02      	add	r7, sp, #8
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	461a      	mov	r2, r3
 8001928:	460b      	mov	r3, r1
 800192a:	817b      	strh	r3, [r7, #10]
 800192c:	4613      	mov	r3, r2
 800192e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff fbfc 	bl	800112c <HAL_GetTick>
 8001934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b20      	cmp	r3, #32
 8001940:	f040 80e0 	bne.w	8001b04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2319      	movs	r3, #25
 800194a:	2201      	movs	r2, #1
 800194c:	4970      	ldr	r1, [pc, #448]	; (8001b10 <HAL_I2C_Master_Transmit+0x1f4>)
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fa92 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
 800195c:	e0d3      	b.n	8001b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_I2C_Master_Transmit+0x50>
 8001968:	2302      	movs	r3, #2
 800196a:	e0cc      	b.n	8001b06 <HAL_I2C_Master_Transmit+0x1ea>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b01      	cmp	r3, #1
 8001980:	d007      	beq.n	8001992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2221      	movs	r2, #33	; 0x21
 80019a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2210      	movs	r2, #16
 80019ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	893a      	ldrh	r2, [r7, #8]
 80019c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <HAL_I2C_Master_Transmit+0x1f8>)
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019d4:	8979      	ldrh	r1, [r7, #10]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	6a3a      	ldr	r2, [r7, #32]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 f9ca 	bl	8001d74 <I2C_MasterRequestWrite>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e08d      	b.n	8001b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a00:	e066      	b.n	8001ad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	6a39      	ldr	r1, [r7, #32]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fb0c 	bl	8002024 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d107      	bne.n	8001a2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06b      	b.n	8001b06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	781a      	ldrb	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_I2C_Master_Transmit+0x188>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d017      	beq.n	8001aa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	6a39      	ldr	r1, [r7, #32]
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 fafc 	bl	80020a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d107      	bne.n	8001acc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e01a      	b.n	8001b06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d194      	bne.n	8001a02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e000      	b.n	8001b06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b04:	2302      	movs	r3, #2
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	00100002 	.word	0x00100002
 8001b14:	ffff0000 	.word	0xffff0000

08001b18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	460b      	mov	r3, r1
 8001b26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff fb00 	bl	800112c <HAL_GetTick>
 8001b2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	f040 8111 	bne.w	8001d62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2319      	movs	r3, #25
 8001b46:	2201      	movs	r2, #1
 8001b48:	4988      	ldr	r1, [pc, #544]	; (8001d6c <HAL_I2C_IsDeviceReady+0x254>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f994 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
 8001b58:	e104      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_I2C_IsDeviceReady+0x50>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e0fd      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x24c>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d007      	beq.n	8001b8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2224      	movs	r2, #36	; 0x24
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a70      	ldr	r2, [pc, #448]	; (8001d70 <HAL_I2C_IsDeviceReady+0x258>)
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f952 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be8:	d103      	bne.n	8001bf2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0b6      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bf6:	897b      	ldrh	r3, [r7, #10]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c04:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff fa91 	bl	800112c <HAL_GetTick>
 8001c0a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c3a:	e025      	b.n	8001c88 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c3c:	f7ff fa76 	bl	800112c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d302      	bcc.n	8001c52 <HAL_I2C_IsDeviceReady+0x13a>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	22a0      	movs	r2, #160	; 0xa0
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2ba0      	cmp	r3, #160	; 0xa0
 8001c92:	d005      	beq.n	8001ca0 <HAL_I2C_IsDeviceReady+0x188>
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_I2C_IsDeviceReady+0x188>
 8001c9a:	7dbb      	ldrb	r3, [r7, #22]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0cd      	beq.n	8001c3c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d129      	bne.n	8001d0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2319      	movs	r3, #25
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4921      	ldr	r1, [pc, #132]	; (8001d6c <HAL_I2C_IsDeviceReady+0x254>)
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f8c6 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e036      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e02c      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2319      	movs	r3, #25
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	490f      	ldr	r1, [pc, #60]	; (8001d6c <HAL_I2C_IsDeviceReady+0x254>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f8a2 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e012      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f4ff af32 	bcc.w	8001bb2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
  }
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	00100002 	.word	0x00100002
 8001d70:	ffff0000 	.word	0xffff0000

08001d74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	460b      	mov	r3, r1
 8001d82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d006      	beq.n	8001d9e <I2C_MasterRequestWrite+0x2a>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d003      	beq.n	8001d9e <I2C_MasterRequestWrite+0x2a>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d9c:	d108      	bne.n	8001db0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e00b      	b.n	8001dc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	2b12      	cmp	r3, #18
 8001db6:	d107      	bne.n	8001dc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f84f 	bl	8001e78 <I2C_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00d      	beq.n	8001dfc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dee:	d103      	bne.n	8001df8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e035      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e04:	d108      	bne.n	8001e18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	e01b      	b.n	8001e50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e18:	897b      	ldrh	r3, [r7, #10]
 8001e1a:	11db      	asrs	r3, r3, #7
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f003 0306 	and.w	r3, r3, #6
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f063 030f 	orn	r3, r3, #15
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <I2C_MasterRequestWrite+0xfc>)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f875 	bl	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e010      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <I2C_MasterRequestWrite+0x100>)
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f865 	bl	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	00010008 	.word	0x00010008
 8001e74:	00010002 	.word	0x00010002

08001e78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e88:	e025      	b.n	8001ed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d021      	beq.n	8001ed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e92:	f7ff f94b 	bl	800112c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d302      	bcc.n	8001ea8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d116      	bne.n	8001ed6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f043 0220 	orr.w	r2, r3, #32
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e023      	b.n	8001f1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d10d      	bne.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4013      	ands	r3, r2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	e00c      	b.n	8001f16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4013      	ands	r3, r2
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf0c      	ite	eq
 8001f0e:	2301      	moveq	r3, #1
 8001f10:	2300      	movne	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d0b6      	beq.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f34:	e051      	b.n	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f44:	d123      	bne.n	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f043 0204 	orr.w	r2, r3, #4
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e046      	b.n	800201c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d021      	beq.n	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f96:	f7ff f8c9 	bl	800112c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d302      	bcc.n	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d116      	bne.n	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f043 0220 	orr.w	r2, r3, #32
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e020      	b.n	800201c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10c      	bne.n	8001ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	e00b      	b.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	43da      	mvns	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4013      	ands	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d18d      	bne.n	8001f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002030:	e02d      	b.n	800208e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f878 	bl	8002128 <I2C_IsAcknowledgeFailed>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e02d      	b.n	800209e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d021      	beq.n	800208e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7ff f86f 	bl	800112c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d116      	bne.n	800208e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e007      	b.n	800209e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d1ca      	bne.n	8002032 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020b2:	e02d      	b.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f837 	bl	8002128 <I2C_IsAcknowledgeFailed>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e02d      	b.n	8002120 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ca:	d021      	beq.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020cc:	f7ff f82e 	bl	800112c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d302      	bcc.n	80020e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e007      	b.n	8002120 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d1ca      	bne.n	80020b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213e:	d11b      	bne.n	8002178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0204 	orr.w	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e272      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d00c      	beq.n	80021ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b0:	4b8f      	ldr	r3, [pc, #572]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d112      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
 80021bc:	4b8c      	ldr	r3, [pc, #560]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d06c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x12c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d168      	bne.n	80022b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e24c      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x76>
 80021ec:	4b80      	ldr	r3, [pc, #512]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7f      	ldr	r2, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	e02e      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a77      	ldr	r2, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0xbc>
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a71      	ldr	r2, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 8002240:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe ff64 	bl	800112c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7fe ff60 	bl	800112c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e200      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xe4>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe ff50 	bl	800112c <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe ff4c 	bl	800112c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1ec      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x10c>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ca:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1c0      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4939      	ldr	r1, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe ff05 	bl	800112c <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7fe ff01 	bl	800112c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1a1      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4927      	ldr	r1, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fee4 	bl	800112c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe fee0 	bl	800112c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e180      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03a      	beq.n	8002408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7fe fec4 	bl	800112c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fec0 	bl	800112c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e160      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 fac4 	bl	8002954 <RCC_Delay>
 80023cc:	e01c      	b.n	8002408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe feaa 	bl	800112c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	e00f      	b.n	80023fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fea6 	bl	800112c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d908      	bls.n	80023fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e146      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	42420000 	.word	0x42420000
 80023f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e9      	bne.n	80023dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a6 	beq.w	8002562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a87      	ldr	r2, [pc, #540]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b85      	ldr	r3, [pc, #532]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002442:	4b82      	ldr	r3, [pc, #520]	; (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7e      	ldr	r2, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7fe fe67 	bl	800112c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7fe fe63 	bl	800112c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b64      	cmp	r3, #100	; 0x64
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e103      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x312>
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x334>
 800249e:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	e01c      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d10c      	bne.n	80024da <HAL_RCC_OscConfig+0x356>
 80024c0:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a60      	ldr	r2, [pc, #384]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a5d      	ldr	r2, [pc, #372]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024da:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a5a      	ldr	r2, [pc, #360]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a57      	ldr	r2, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fe17 	bl	800112c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fe13 	bl	800112c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0b1      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ee      	beq.n	8002502 <HAL_RCC_OscConfig+0x37e>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe fe01 	bl	800112c <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fdfd 	bl	800112c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e09b      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	4b40      	ldr	r3, [pc, #256]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a3b      	ldr	r2, [pc, #236]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8087 	beq.w	800267a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d061      	beq.n	800263c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d146      	bne.n	800260e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b33      	ldr	r3, [pc, #204]	; (8002650 <HAL_RCC_OscConfig+0x4cc>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe fdd1 	bl	800112c <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe fdcd 	bl	800112c <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e06d      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4921      	ldr	r1, [pc, #132]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a19      	ldr	r1, [r3, #32]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	430b      	orrs	r3, r1
 80025da:	491b      	ldr	r1, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fda1 	bl	800112c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe fd9d 	bl	800112c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e03d      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x46a>
 800260c:	e035      	b.n	800267a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_OscConfig+0x4cc>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fd8a 	bl	800112c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fd86 	bl	800112c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e026      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x498>
 800263a:	e01e      	b.n	800267a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e019      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x500>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	429a      	cmp	r2, r3
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4965      	ldr	r1, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7fe fcd8 	bl	800112c <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7fe fcd4 	bl	800112c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1cc>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fc36 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	0800398c 	.word	0x0800398c
 8002854:	200008e0 	.word	0x200008e0
 8002858:	200008e4 	.word	0x200008e4

0800285c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b490      	push	{r4, r7}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002862:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_RCC_GetSysClockFreq+0xac>)
 8002864:	1d3c      	adds	r4, r7, #4
 8002866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800286c:	f240 2301 	movw	r3, #513	; 0x201
 8002870:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002886:	4b21      	ldr	r3, [pc, #132]	; (800290c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b04      	cmp	r3, #4
 8002894:	d002      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x40>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x46>
 800289a:	e02b      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb4>)
 800289e:	623b      	str	r3, [r7, #32]
      break;
 80028a0:	e02b      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	0c9b      	lsrs	r3, r3, #18
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3328      	adds	r3, #40	; 0x28
 80028ac:	443b      	add	r3, r7
 80028ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d012      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0c5b      	lsrs	r3, r3, #17
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	3328      	adds	r3, #40	; 0x28
 80028ca:	443b      	add	r3, r7
 80028cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d6:	fb03 f202 	mul.w	r2, r3, r2
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	e004      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	623b      	str	r3, [r7, #32]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f6:	623b      	str	r3, [r7, #32]
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc90      	pop	{r4, r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	08003210 	.word	0x08003210
 800290c:	40021000 	.word	0x40021000
 8002910:	007a1200 	.word	0x007a1200
 8002914:	003d0900 	.word	0x003d0900

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b02      	ldr	r3, [pc, #8]	; (8002928 <HAL_RCC_GetHCLKFreq+0x10>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	200008e0 	.word	0x200008e0

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002930:	f7ff fff2 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	0800399c 	.word	0x0800399c

08002954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <RCC_Delay+0x34>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <RCC_Delay+0x38>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a5b      	lsrs	r3, r3, #9
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002970:	bf00      	nop
  }
  while (Delay --);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f9      	bne.n	8002970 <RCC_Delay+0x1c>
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	200008e0 	.word	0x200008e0
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e041      	b.n	8002a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe faca 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f000 fa70 	bl	8002eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e03a      	b.n	8002abe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_TIM_Base_Start_IT+0x98>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00e      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x58>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a72:	d009      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x58>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_TIM_Base_Start_IT+0x9c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x58>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d111      	bne.n	8002aac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d010      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	e007      	b.n	8002abc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800

08002ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d122      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d11b      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0202 	mvn.w	r2, #2
 8002b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f9b1 	bl	8002e7e <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9a4 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f9b3 	bl	8002e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d122      	bne.n	8002b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d11b      	bne.n	8002b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0204 	mvn.w	r2, #4
 8002b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f987 	bl	8002e7e <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f97a 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f989 	bl	8002e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d122      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b08      	cmp	r3, #8
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0208 	mvn.w	r2, #8
 8002ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2204      	movs	r2, #4
 8002bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f95d 	bl	8002e7e <HAL_TIM_IC_CaptureCallback>
 8002bc4:	e005      	b.n	8002bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f950 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f95f 	bl	8002e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d122      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d11b      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0210 	mvn.w	r2, #16
 8002bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2208      	movs	r2, #8
 8002c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f933 	bl	8002e7e <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f926 	bl	8002e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f935 	bl	8002e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10e      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d107      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0201 	mvn.w	r2, #1
 8002c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd fe00 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b80      	cmp	r3, #128	; 0x80
 8002c64:	d10e      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d107      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa77 	bl	8003172 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d10e      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d107      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8f9 	bl	8002ea2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d107      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0220 	mvn.w	r2, #32
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa42 	bl	8003160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_TIM_ConfigClockSource+0x18>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0b3      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x180>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d34:	d03e      	beq.n	8002db4 <HAL_TIM_ConfigClockSource+0xd0>
 8002d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3a:	f200 8087 	bhi.w	8002e4c <HAL_TIM_ConfigClockSource+0x168>
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	f000 8085 	beq.w	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4a:	d87f      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x168>
 8002d4c:	2b70      	cmp	r3, #112	; 0x70
 8002d4e:	d01a      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0xa2>
 8002d50:	2b70      	cmp	r3, #112	; 0x70
 8002d52:	d87b      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x168>
 8002d54:	2b60      	cmp	r3, #96	; 0x60
 8002d56:	d050      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x116>
 8002d58:	2b60      	cmp	r3, #96	; 0x60
 8002d5a:	d877      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x168>
 8002d5c:	2b50      	cmp	r3, #80	; 0x50
 8002d5e:	d03c      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0xf6>
 8002d60:	2b50      	cmp	r3, #80	; 0x50
 8002d62:	d873      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x168>
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d058      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x136>
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d86f      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x168>
 8002d6c:	2b30      	cmp	r3, #48	; 0x30
 8002d6e:	d064      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x156>
 8002d70:	2b30      	cmp	r3, #48	; 0x30
 8002d72:	d86b      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x168>
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d060      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x156>
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d867      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x168>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d05c      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x156>
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d05a      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d84:	e062      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f000 f966 	bl	8003066 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002da8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	609a      	str	r2, [r3, #8]
      break;
 8002db2:	e04e      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f000 f94f 	bl	8003066 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd6:	609a      	str	r2, [r3, #8]
      break;
 8002dd8:	e03b      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f000 f8c6 	bl	8002f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2150      	movs	r1, #80	; 0x50
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f91d 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002df8:	e02b      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f000 f8e4 	bl	8002fd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2160      	movs	r1, #96	; 0x60
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f90d 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002e18:	e01b      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f000 f8a6 	bl	8002f78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2140      	movs	r1, #64	; 0x40
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f8fd 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002e38:	e00b      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f000 f8f4 	bl	8003032 <TIM_ITRx_SetConfig>
        break;
 8002e4a:	e002      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e000      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <TIM_Base_SetConfig+0xb8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <TIM_Base_SetConfig+0x30>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d007      	beq.n	8002ee4 <TIM_Base_SetConfig+0x30>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <TIM_Base_SetConfig+0xbc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_Base_SetConfig+0x30>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <TIM_Base_SetConfig+0xc0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <TIM_Base_SetConfig+0xb8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <TIM_Base_SetConfig+0x62>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d007      	beq.n	8002f16 <TIM_Base_SetConfig+0x62>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a19      	ldr	r2, [pc, #100]	; (8002f70 <TIM_Base_SetConfig+0xbc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <TIM_Base_SetConfig+0x62>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <TIM_Base_SetConfig+0xc0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <TIM_Base_SetConfig+0xb8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]
}
 8002f62:	bf00      	nop
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800

08002f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f023 030a 	bic.w	r3, r3, #10
 8002fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0210 	bic.w	r2, r3, #16
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ffe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	031b      	lsls	r3, r3, #12
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003010:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	621a      	str	r2, [r3, #32]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	f043 0307 	orr.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003066:	b480      	push	{r7}
 8003068:	b087      	sub	sp, #28
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003080:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	431a      	orrs	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4313      	orrs	r3, r2
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	609a      	str	r2, [r3, #8]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e046      	b.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d009      	beq.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a10      	ldr	r2, [pc, #64]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d10c      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4313      	orrs	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800

08003160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <__libc_init_array>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	2600      	movs	r6, #0
 8003188:	4d0c      	ldr	r5, [pc, #48]	; (80031bc <__libc_init_array+0x38>)
 800318a:	4c0d      	ldr	r4, [pc, #52]	; (80031c0 <__libc_init_array+0x3c>)
 800318c:	1b64      	subs	r4, r4, r5
 800318e:	10a4      	asrs	r4, r4, #2
 8003190:	42a6      	cmp	r6, r4
 8003192:	d109      	bne.n	80031a8 <__libc_init_array+0x24>
 8003194:	f000 f822 	bl	80031dc <_init>
 8003198:	2600      	movs	r6, #0
 800319a:	4d0a      	ldr	r5, [pc, #40]	; (80031c4 <__libc_init_array+0x40>)
 800319c:	4c0a      	ldr	r4, [pc, #40]	; (80031c8 <__libc_init_array+0x44>)
 800319e:	1b64      	subs	r4, r4, r5
 80031a0:	10a4      	asrs	r4, r4, #2
 80031a2:	42a6      	cmp	r6, r4
 80031a4:	d105      	bne.n	80031b2 <__libc_init_array+0x2e>
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
 80031a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ac:	4798      	blx	r3
 80031ae:	3601      	adds	r6, #1
 80031b0:	e7ee      	b.n	8003190 <__libc_init_array+0xc>
 80031b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b6:	4798      	blx	r3
 80031b8:	3601      	adds	r6, #1
 80031ba:	e7f2      	b.n	80031a2 <__libc_init_array+0x1e>
 80031bc:	080039a4 	.word	0x080039a4
 80031c0:	080039a4 	.word	0x080039a4
 80031c4:	080039a4 	.word	0x080039a4
 80031c8:	080039a8 	.word	0x080039a8

080031cc <memset>:
 80031cc:	4603      	mov	r3, r0
 80031ce:	4402      	add	r2, r0
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d100      	bne.n	80031d6 <memset+0xa>
 80031d4:	4770      	bx	lr
 80031d6:	f803 1b01 	strb.w	r1, [r3], #1
 80031da:	e7f9      	b.n	80031d0 <memset+0x4>

080031dc <_init>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr

080031e8 <_fini>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr
